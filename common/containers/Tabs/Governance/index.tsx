import React, { Component } from 'react';
import { Switch, Route, Redirect, RouteComponentProps } from 'react-router';
import { connect } from 'react-redux';
import translate, { translateRaw } from 'translations';
import TabSection from 'containers/TabSection';
import FreeContractCallScreen from './components/FreeContractCallScreen';
import SubTabs from 'components/SubTabs';
import { RouteNotFound } from 'components/RouteNotFound';
import { Interact } from './components/Interact';

import './index.scss';
import { Button } from './components/Button';
//TODO: move these functioncall stuff into a separate component

//add all functioncall names here.
//Maybe change this so it can be generated by the contract
//though for user experience doing it here would probably make more sense
export enum CostlyContractCallName {
  VOTE = 'vote',
  CLAIM = 'claim',
  COLLECT = 'collect'
}

export enum FreeContractCallName {
  BALLOT_HISTORY = 'ballot history',
  CURRENT_GOVERNANCE_CYCLE = 'current governance cycle',
  WITHDRAW_RECORDS = 'withdraw records',
  BALLOT_RECORDS = 'ballot records',
  GOVERNANCE_CYCLE_RECORDS = 'governance cycle records',
  NOMINEE_BALLOTS = 'nominee ballots',
  CAN_GOVERN = 'can govern',
  IS_KYC_APPROVED = 'is kyc approved',
  IS_KYC_DENIED = 'is kyc denied',
  WITHDRAW_HISTORY = 'withdraw history'
}

export enum NoCallName {
  NONE_DECLARED = 'no contract function call'
}

export type ContractFuncNames = CostlyContractCallName | FreeContractCallName | NoCallName;

export interface ContractCallDesc {
  name: string;
  icon?: string;
  description: string;
  example?: string;
}

const COSTLYFUNCTIONCALLS: ContractFuncNames[] = Object.values(CostlyContractCallName);
const FREEFUNCTIONCALLS: ContractFuncNames[] = Object.values(FreeContractCallName);
type CostlyContractCall = { [key in CostlyContractCallName]: ContractCallDesc };
type FreeContractCall = { [key in FreeContractCallName]: ContractCallDesc };
type ContractCall = CostlyContractCall | FreeContractCall;

export enum GovernanceFlowStages {
  START_PAGE = 'start page',
  FREE_CALL_PAGE = 'free call page',
  COSTLY_CALL_PAGE = 'costly call page'
}

export interface State {
  stage: GovernanceFlowStages;
  chosenCall: ContractFuncNames;
}

class Governance extends Component<{}, State> {
  constructor(props: {}) {
    super(props);
    this.state = {
      stage: GovernanceFlowStages.START_PAGE,
      chosenCall: NoCallName.NONE_DECLARED
    };
    this.goTo = this.goTo.bind(this);
    this.goBack = this.goBack.bind(this);
  }
  goTo(stage: GovernanceFlowStages, declaredCall: ContractFuncNames) {
    this.setState((state: State) => {
      let newState = Object.assign({}, state);
      newState.stage = stage;
      newState.chosenCall = declaredCall;
      return newState;
    });
  }
  public CONTRACTCALLS: ContractCall = {
    [CostlyContractCallName.VOTE]: {
      name: 'VOTE',
      description: 'Vote or nominate an address'
    },
    [CostlyContractCallName.CLAIM]: {
      name: 'CLAIM',
      description: 'Claim your tokens'
    },
    [CostlyContractCallName.COLLECT]: {
      name: 'COLLECT',
      description: 'Collect your tokens'
    },
    [FreeContractCallName.BALLOT_HISTORY]: {
      name: 'BALLOT_HISTORY',
      description: 'Ballot history'
    },
    [FreeContractCallName.CURRENT_GOVERNANCE_CYCLE]: {
      name: 'CURRENT_GOVERNANCE_CYCLE',
      description: 'Ballot history'
    },
    [FreeContractCallName.WITHDRAW_RECORDS]: {
      name: 'WITHDRAW_RECORDS',
      description: 'Ballot history'
    },
    [FreeContractCallName.BALLOT_RECORDS]: {
      name: 'BALLOT_RECORDS',
      description: 'Ballot history'
    },
    [FreeContractCallName.GOVERNANCE_CYCLE_RECORDS]: {
      name: 'GOVERNANCE_CYCLE_RECORDS',
      description: 'Ballot history'
    },
    [FreeContractCallName.NOMINEE_BALLOTS]: {
      name: 'NOMINEE_BALLOTS',
      description: 'Ballot history'
    },
    [FreeContractCallName.CAN_GOVERN]: {
      name: 'CAN_GOVERN',
      description: 'Ballot history'
    },
    [FreeContractCallName.IS_KYC_APPROVED]: {
      name: 'IS_KYC_APPROVED',
      description: 'Ballot history'
    },
    [FreeContractCallName.IS_KYC_DENIED]: {
      name: 'IS_KYC_DENIED',
      description: 'Ballot history'
    },
    [FreeContractCallName.WITHDRAW_HISTORY]: {
      name: 'WITHDRAW_HISTORY',
      description: 'Ballot history'
    }
  };

  public buildFunctionOptions(
    contractCallMap: ContractFuncNames[],
    stateTransition: GovernanceFlowStages
  ) {
    return (
      <div className="GovernanceSection-row">
        {contractCallMap.map((contractCall: ContractFuncNames) => {
          const call = this.CONTRACTCALLS[contractCall];
          console.log(call, 'asdfasdf');
          return (
            <Button
              key={contractCall}
              name={translateRaw(call.name)}
              onClick={() => this.goTo(stateTransition, contractCall)}
              description={translateRaw(call.description)}
            />
          );
        })}
      </div>
    );
  }

  public goBack() {
    // your transition
    this.goTo(GovernanceFlowStages.START_PAGE, NoCallName.NONE_DECLARED);
  }

  public render() {
    let stages = GovernanceFlowStages;
    switch (this.state.stage) {
      case GovernanceFlowStages.START_PAGE:
        return (
          <TabSection isUnavailableOffline={true}>
            <div className="GovernanceSection-topsection">
              <h2 className="ContractSection-topsection-title">
                {translate('GENERATE_GOVERNANCE_TITLE')}
              </h2>
              <p className="GovernanceSection-topsection-subtitle">
                {translate('GENERATE_GOVERNANCE_DESC')}
              </p>
            </div>
            <section className="SubTabs-contracts" />
            <section className="Tab-content">
              <p className="GovernanceSection-subtitle">
                {translate('COSTLY_GOVERNANCE_CALL_DESC')}
              </p>
              {this.buildFunctionOptions(COSTLYFUNCTIONCALLS, stages.COSTLY_CALL_PAGE)}
              <p className="GovernanceSection-subtitle">{translate('FREE_GOVERNANCE_CALL_DESC')}</p>
              {this.buildFunctionOptions(FREEFUNCTIONCALLS, stages.FREE_CALL_PAGE)}
            </section>
          </TabSection>
        );
      case GovernanceFlowStages.FREE_CALL_PAGE:
        return (
          <FreeContractCallScreen goBack={this.goBack} contractFxnName={this.state.chosenCall} />
        );
      case GovernanceFlowStages.COSTLY_CALL_PAGE:
        return <TabSection>Hello, World</TabSection>;
    }
  }
}

export default connect(null, {})(Governance);
